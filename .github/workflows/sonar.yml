on:
  # Trigger analysis when pushing in master or pull requests, and when creating
  # a pull request.
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
name: Main Workflow
jobs:
  sonarqube:
    runs-on: ubuntu-latest
    env:
      MY_PERSONAL_TOKEN: ${{ secrets.MY_PERSONAL_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting.
          fetch-depth: 0

      # Triggering SonarQube analysis as results of it are required by Quality Gate check.
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONARQUBE_HOST }}

      - name: Upload SonarQube Analysis Results to GitHub Check API
        uses: actions/upload-artifact@v3
        with:
          name: sonar-analysis-results
          path: sonar-report/

      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONARQUBE_HOST }}


      - name: Install Dependencies
        run: npm install @actions/github

      # Optionally you can use the output from the Quality Gate in another step.
      # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      - name: Show SonarQube Quality Gate Status
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

      - name: Create SonarQube Check Run
        uses: actions/github-script@v7
        with:
          script: |
            const { getOctokit } = require('@actions/github');

            const octokitWithToken = getOctokit({ auth: process.env.MY_PERSONAL_TOKEN });

            const checkRunPayload = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'SonarQube Analysis',
              head_sha: context.sha,
              status: 'completed',
              conclusion: 'success',  // You can customize this based on SonarQube results
              started_at: new Date().toISOString(),
              completed_at: new Date().toISOString(),
              output: {
                title: 'SonarQube Analysis Results',
                summary: 'SonarQube analysis results for your pull request',
                text: `Bugs: 155 \n Code Smells: 10\nDuplication: 11 \nTest Coverage: 19`,
              },
            };

            await octokitWithToken.rest.checks.create(checkRunPayload);
